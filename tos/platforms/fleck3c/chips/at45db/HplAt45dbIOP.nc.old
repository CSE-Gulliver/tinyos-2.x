// $Id: HplAt45dbIOP.nc,v 1.2 2008/06/11 00:46:26 razvanm Exp $

/*
 * "Copyright (c) 2000-2003 The Regents of the University  of California.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 *
 * Copyright (c) 2002-2003 Intel Corporation
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached INTEL-LICENSE
 * file. If you do not find these files, copies can be found by writing to
 * Intel Research Berkeley, 2150 Shattuck Avenue, Suite 1300, Berkeley, CA,
 * 94704.  Attention:  Intel License Inquiry.
 */
/*
 * Copyright (c) 2007, Vanderbilt University
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without written agreement is
 * hereby granted, provided that the above copyright notice, the following
 * two paragraphs and the author appear in all copies of this software.
 *
 * IN NO EVENT SHALL THE VANDERBILT UNIVERSITY BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE VANDERBILT
 * UNIVERSITY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE VANDERBILT UNIVERSITY SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE VANDERBILT UNIVERSITY HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 *
 */
/**
 * Low level hardware access to the onboard AT45DB flash chip.
 *
 * @author Jason Hill
 * @author David Gay
 * @author Philip Levis
 * @author Janos Sallai <janos.sallai@vanderbilt.edu>
 */
/**
 * Adjusted for CSIRO fleck3c, 2009, removed the assembler stuff - no need for
 * this in an advanced world.
 * Christian.Richter@csiro.au
 */

#include "Timer.h"

module HplAt45dbIOP {
  provides {
    interface Init;
    interface SpiByte as FlashSpi;
    interface HplAt45dbByte;
  }
  uses {
    interface GeneralIO as SelectN;
    interface GeneralIO as Clk;
    interface GeneralIO as Out;
    interface GeneralIO as In;
    interface BusyWait<TMicro, uint16_t>;
    interface Resource as SpiResource;
    interface FastSpiByte;
    interface Atm128Spi as SpiCtrl;
  }
}
implementation
{
  // We use SPI mode 0 (clock low at select time)
  command error_t Init.init() {
    call SelectN.makeOutput();
    call SelectN.set();
/*    call Clk.clr();
    call Clk.makeOutput();
    call Out.clr();
    call Out.makeOutput();
    call In.clr();
    call In.makeInput();*/
    return SUCCESS;
  }

  /* Spi bus granted, we can select the CS */
  event void SpiResource.granted(){
    atomic {
      call Clk.clr(); // ensure SPI mode 0
      call SelectN.clr();
    }
  }

  command void HplAt45dbByte.select() {
//    if(SUCCESS != call SpiResource.request()){
      call SpiResource.immediateRequest();
//    }
  }

  command void HplAt45dbByte.deselect() {
    atomic {
      call SelectN.set();
      call SpiResource.release();
    }
  }

  async command uint8_t FlashSpi.write(uint8_t spiOut) {

    if(call SelectN.get()){
        /* we are still waiting for SPI - damn */
        call SelectN.clr();
        call BusyWait.wait(1);
    }

    call FastSpiByte.splitWrite(spiOut);
    return call FastSpiByte.splitRead();
    
  }

  task void avail() {
    signal HplAt45dbByte.idle();
  }

  command void HplAt45dbByte.waitIdle() {
/*    while (call FastSpiByte.splitReadWrite(0));
    post avail();*/
    // at45db041 rev d fix by handsomezhu hongsong at ios.cn
    // http://mail.millennium.berkeley.edu/pipermail/tinyos-help/2008-January/030255.html
    int i;
    call Clk.clr();
    call BusyWait.wait(2);
    while( ! call In.get() ) {
      for( i=0; i < 8; i ++ ) {
        call Clk.set();
        call Clk.clr();
        call BusyWait.wait(2);
      }
    }
    post avail();
  }

  command bool HplAt45dbByte.getCompareStatus() {
    call Clk.set();
    call Clk.clr();
    // Wait for compare value to propagate
    asm volatile("nop");
    asm volatile("nop");
    return !call In.get();
  }

   // for the SpiCtrl interface
  async event void SpiCtrl.dataReady(uint8_t data){
  }

}
